/*
 * data.h
 *
 *  Created on: Jun 15, 2020
 *      Author: Alex
 */
#ifndef DATA_H_
#define DATA_H_

#define CARD_NAME "8Current"
#define PROGRAM_NAME "8crt"
#define VERSION "1.0.0"

#define SLAVE_OWN_ADDRESS_BASE 0x19

#define MIN_CH_NO 1
#define CRT_IN_CH_NO 8
#define LED_CH_NO 8

#define CRT_SCALE 100

#define COUNTER_SIZE 4
#define ANALOG_VAL_SIZE 2
#define MODBUS_SETTINGS_SIZE_B 5


#define CALIBRATION_KEY 0xaa
#define RESET_CALIBRATION_KEY	0x55
#define ZERO_CURRENT_KEY 0x11

#define WDT_RESET_SIGNATURE     0xca
#define WDT_RESET_COUNT_SIGNATURE    0xbe

#define VOLT_TO_MILIVOLT 1000
#define MILIAMPER_TO_MICROAMPER 1000

enum
{
	CALIB_IN_PROGRESS = 0,
	CALIB_DONE,
	CALIB_ERROR,
};

enum
{
	CALIB_NOTHING = 0,
	CALIB_CRT_IN_CH1,
};

enum
{

	I2C_MEM_LEDS,
	I2C_MEM_LED_SET,
	I2C_MEM_LED_CLR,

	I2C_CRT_IN_VAL1_ADD , // current vales scaled as A/100 (1 = 0.01A) 16-bit signed integer
	I2C_CRT_IN_RMS_VAL1_ADD  = I2C_CRT_IN_VAL1_ADD + ANALOG_VAL_SIZE * CRT_IN_CH_NO, //current RMS values scaled as A/100 16bit unsigned integer
	I2C_CRT_SNS_RANGE1_ADD = I2C_CRT_IN_RMS_VAL1_ADD + ANALOG_VAL_SIZE * CRT_IN_CH_NO,// full scale in A for each sensor 16-bit unsigned integer
	I2C_CRT_SNS_TYPE = I2C_CRT_SNS_RANGE1_ADD + ANALOG_VAL_SIZE * CRT_IN_CH_NO,// a bitmap for all 8 channels 0 = 2.5V +/- 0.625V , and  1 = 2.5V +/- 1V type of sensor

	I2C_MEM_CALIB_VALUE, // floating point value expressing the current in A
	I2C_MEM_CALIB_CHANNEL = I2C_MEM_CALIB_VALUE + 4,
	I2C_MEM_CALIB_KEY, //set calib point -> 0xaa; reset calibration on the channel -> 0x55; save zero current offset -> 0x11
	I2C_MEM_CALIB_STATUS,

	I2C_RTC_YEAR_ADD,
	I2C_RTC_MONTH_ADD,
	I2C_RTC_DAY_ADD,
	I2C_RTC_HOUR_ADD,
	I2C_RTC_MINUTE_ADD,
	I2C_RTC_SECOND_ADD,
	I2C_RTC_SET_YEAR_ADD,
	I2C_RTC_SET_MONTH_ADD,
	I2C_RTC_SET_DAY_ADD,
	I2C_RTC_SET_HOUR_ADD,
	I2C_RTC_SET_MINUTE_ADD,
	I2C_RTC_SET_SECOND_ADD,
	I2C_RTC_CMD_ADD,

	I2C_MEM_WDT_RESET_ADD,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD + 4,
	I2C_MEM_BUTTON = I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD + 4,
	I2C_MEM_DIAG_RASP_V,
	I2C_MEM_DIAG_RASP_V1,

   I2C_MODBUS_SETINGS_ADD,
	I2C_MODBUS_SETINGS_END_ADD = I2C_MODBUS_SETINGS_ADD + MODBUS_SETTINGS_SIZE_B,

	I2C_MEM_UPDATE_ADD = 0xaa,

	I2C_MEM_REVISION_HW_MAJOR_ADD = 250,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,



	SLAVE_BUFF_SIZE = 255,
};


#define ERROR -1
#define OK 0
#define ARG_CNT_ERR -2
#define ARG_RANGE_ERROR -3
#define IO_ERROR -4

#define STR_(x) #x
#define STR(x) STR_(x)
#define MASK_1 1
#define MASK_2 3
#define MASK_3 7
#define MASK_4 15
#define MASK_5 31
#define MASK_6 63
#define MASK_7 127
#define MASK_(x) MASK_##x
#define MASK(x) MASK_(x)

typedef enum {
	OFF,
	ON,
	STATE_COUNT,
} State;

#endif /* DATA_H_ */
